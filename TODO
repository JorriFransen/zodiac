
- Make a infer_node a source for infer nodes, so we don't have to do stuff like this:

(in flatten_expression)
case AST_Expression_Kind::COMPOUND: {

        assert(infer_node);
        assert(infer_node->target_kind == Infer_Target::DEFAULT);

        for (s64 i = 0; i < expr->compound.expressions.count; i++) {

            Infer_Node *infer_from = nullptr;

            switch (infer_node->source_kind) {

                case Infer_Source::TYPE: infer_from = member_infer_node_new(resolver->ctx, infer_node->source.type, i); break;
                case Infer_Source::TYPE_SPEC: infer_from = member_infer_node_new(resolver->ctx, infer_node->source.type_spec, i); break;
                case Infer_Source::EXPR: infer_from = member_infer_node_new(resolver->ctx, infer_node->source.expr, i); break;
            }

            assert(infer_from);
            flatten_expression(resolver, expr->compound.expressions[i], scope, dest, infer_from);
        }
    }


- Create compound literal expression from pointer returned by run (when returning a struct)
- Test rundirectives with different types and with constants
- Test compound literals
 - global (constants)

- Struct literal expressions
    - Nested structs
    - Test with different types
    - With non constant values

- Convert structs returned from run directives into ast expression (struct literal).

- Ensure #run expressions are constant (report error)

- Report error for #run on statement level when not in global scope

- Fix crash when passing in folder name instead of file name on command line

- Validate bytecode for runs

- Support multiple adjacent function parameters with the same typespec (parser). Like we do for struct fields.

- Try to report (fatal) errors before executing run directives

- Base run wrapper names on filename/line



- Calculate/substitute non leaf constant expressions before emitting bytecode (we only do this when emitting bytecode now).

test
- Containers
  - Hash table
    - Remove
  - Bucket array

- Cleanup builtin types/symbols/atoms
    - Remove builtin type stuff from parser (probably move to type.h and include this)

- Report circular dependency chains (Right now we just emit error for all the unresolved symbols in the chain)

- decls_to_resolve should be a bucket array
- Report the circle when a circular dependency happens
- Report unused return value for call statements
