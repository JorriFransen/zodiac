
- Register bytecode functions via the function protos
- We still crash when recursing too deep in the interpreter, it seems to be related to growing/reallocating registers in push_stack_frame
- Logical && and ||

- Break
  - Loops
  - Switch
  - Labels (use the  loop condition / iterator / switch value  somehow)

- Recursive functions

- Switch
  - Enum ranges?
  - Check for overlapping ranges and duplicate values in multi value cases
  - Optimize blocks that are empty, or only have a falltrough

- Specify enum types
- #complete on enum types and switch statements

- Calling function pointers

- FFI with different return types

- Lazy && and ||

- Default values
    - Uninitialized

- Assert
- Slice bounds checking

- When emitting non constant compound expressions some of it's members/elements might be constant. Constant members should be emitted to a value first, which we can then use to insert the non const values into.

- Allow casting enum members to the enum type they are a part of?
    This will require creating the enum type before adding the members, and finalizing it when all members have been added.

- Try to report (fatal) errors before executing run directives

- Support multiple adjacent function parameters with the same typespec (parser). Like we do for struct fields.

- There is multiple places (in ast_const_expr_to_bytecode, and the constant resolver) where we lookup a symbol, find the declaration (variable/constant), find the init expression. This can probably be wrapped up in a function.

- Maybe only allow run statements inside of blocks? (add print expression to allow that)??
- Look into weird behaviour with bool_to_string from the support lib

- Cleanup builtin types/symbols/atoms
    - Remove builtin type stuff from parser (probably move to type.h and include this)

- Report circular dependency chains (Right now we just emit error for all the unresolved symbols in the chain)

- decls_to_resolve should be a bucket array
- Report the circle when a circular dependency happens
- Report unused return value for call statements
