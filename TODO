
- Test rundirectives with different types and with constants
    - array element types
    - array element types as struct members? (Not sure this is a seperate case.)

- Struct literal expressions (add as tests)
    - return {2, 3} (Vec2)
    - As function arguments (tests)
    - With non constant values
    - global

- Some way to get static array length
- static array tests

- Try to report (fatal) errors before executing run directives

- Slices (just call them arrays maybe?)

- Convert structs returned from run directives into ast expression (struct literal).

- Support multiple adjacent function parameters with the same typespec (parser). Like we do for struct fields.

- There is multiple places (in ast_const_expr_to_bytecode, and the constant resolver) where we lookup a symbol, find the declaration (variable/constant), find the init expression. This can probably be wrapped up in a function.

- Maybe only allow run statements inside of blocks? (add print expression to allow that)??
- Look into weird behaviour with bool_to_string from the support lib

test
- Containers
  - Hash table
    - Remove
  - Bucket array

- Cleanup builtin types/symbols/atoms
    - Remove builtin type stuff from parser (probably move to type.h and include this)

- Report circular dependency chains (Right now we just emit error for all the unresolved symbols in the chain)

- decls_to_resolve should be a bucket array
- Report the circle when a circular dependency happens
- Report unused return value for call statements
