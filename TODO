
- Create compound literal expression from pointer returned by run (when returning a struct)
- Free the interpreter after running a run wrapper (execute_run_wrapper will need to return a reference to the interpreter).
- Test rundirectives with different types and with constants
- Test compound literals
 - global (constants)

- Struct literal expressions
    - As function arguments
    - Nested structs
    - Test with different types
    - With non constant values

- Convert structs returned from run directives into ast expression (struct literal).

- Ensure #run expressions are constant (report error)

- Report error for #run on statement level when not in global scope

- Fix crash when passing in folder name instead of file name on command line

- Validate bytecode for runs

- Support multiple adjacent function parameters with the same typespec (parser). Like we do for struct fields.

- Try to report (fatal) errors before executing run directives

- Base run wrapper names on filename/line



- Calculate/substitute non leaf constant expressions before emitting bytecode (we only do this when emitting bytecode now).

test
- Containers
  - Hash table
    - Remove
  - Bucket array

- Cleanup builtin types/symbols/atoms
    - Remove builtin type stuff from parser (probably move to type.h and include this)

- Report circular dependency chains (Right now we just emit error for all the unresolved symbols in the chain)

- decls_to_resolve should be a bucket array
- Report the circle when a circular dependency happens
- Report unused return value for call statements
