
#foreign printf :: (fmt: *u8, args: ..) -> s32;

print :: (args: ..) {
    for i := 0; i < args.length; i += 1 {
        print_any(args[i]);
    }
}

println :: (args: ..) {
    print(..args);
    printf("\n");
}

print_any :: (any: Any) -> void {

    switch (any.type.kind) {

        case Type_Info_Kind.Integer:
            ii := cast(*Type_Info_Int, any.type);

            if (ii.sign) {
                switch (any.type.size) {
                    case 8: printf("%i", <cast(*s64, any.value));
                    case 4: printf("%i", <cast(*s32, any.value));
                    case 2: printf("%i", <cast(*s16, any.value));
                    case 1: printf("%i", <cast(*s8, any.value));
                    default: printf("Unhandled integer size in print_any");
                }
            } else {
                switch (any.type.size) {
                    case 8: printf("%u", <cast(*u64, any.value));
                    case 4: printf("%u", <cast(*u32, any.value));
                    case 2: printf("%u", <cast(*u16, any.value));
                    case 1: printf("%u", <cast(*u8, any.value));
                    default: printf("Unhandled integer size in print_any");
                }
            }

        case Type_Info_Kind.Real:
            if any.type.size == 4 {
                printf("%f", <cast(*r32, any.value));
            } else if any.type.size == 8 {
                printf("%f", <cast(*r64, any.value));
            } else {
                printf("Unhandled real size in print_any");
            }

        case Type_Info_Kind.Bool:
            if <cast(*bool, any.value) {
                printf("true");
            } else {
                printf("false");
            }

        case Type_Info_Kind.Pointer:
            value := <cast(*u64, any.value);
            if value == 0 {
                printf("(nil)");
            } else {
                printf("%p", value);
            }

        case Type_Info_Kind.Struct:

            if any.type == #type_info(String) {
                strp := cast(*String, any.value);
                printf("%.*s", strp.length, strp.data);
            } else {
                si := cast(*Type_Info_Struct, any.type);
                printf("{ ");

                struct_mem : []u8;
                struct_mem.data = any.value;
                struct_mem.length = any.type.size;

                for i := 0; i < si.members.length; i += 1 {
                    member := si.members[i];

                    if i > 0 printf(", ");

                    is_string := member.type == #type_info(String);

                    member_any : Any = { member.type, *struct_mem[member.offset] };

                    if is_string printf("\"");
                    print_any(member_any);
                    if is_string printf("\"");
                }

                printf(" }");
            }

        case Type_Info_Kind.Enum:
            ei := cast(*Type_Info_Enum, any.type);

            // name: String = "Invalid enum value";
            // for i := 0; i < ei.members.length; i += 1 {
            //     if ei.members[i].value == <cast(*s64, any.value) {
            //         name = ei.members[i].name;
            //
            //         // Hack because we don't have break yet
            //         i = ei.members.length;
            //     }
            // }

            int_any : Any = { ei.integer_type, any.value };
            print_any(int_any);

        case Type_Info_Kind.Static_Array:
            ai := cast(*Type_Info_Static_Array, any.type);

            arr_mem : []u8;
            arr_mem.data = any.value;
            arr_mem.length = ai.length * ai.element_type.size;

            is_string := ai.element_type == #type_info(String);

            printf("{ ");
            for i := 0; i < ai.length; i += 1 {
                if i > 0 printf(", ");

                elem_any : Any = { ai.element_type, *arr_mem[ai.element_type.size * i] };

                if is_string printf("\"");
                print_any(elem_any);
                if is_string printf("\"");
            }
            printf(" }");


        case Type_Info_Kind.Slice:
            si := cast(*Type_Info_Slice, any.type);

            slice := <cast(*[]s64, any.value);

            arr_mem : []u8;
            arr_mem.data = cast(*u8, slice.data);
            arr_mem.length = slice.length * si.element_type.size;

            printf("{ ");
            for i := 0; i < slice.length; i += 1 {
                if i > 0 printf(", ");

                elem_any : Any = { si.element_type, *arr_mem[si.element_type.size * i] };
                print_any(elem_any);
            }
            printf(" }");

        default: printf("!!!!!  UNHANDLED TYPE IN print_any !!!!!");
    }
}
