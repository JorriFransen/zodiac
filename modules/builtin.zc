
#foreign malloc :: (size: s64) -> *u8;
#foreign free :: (ptr: *u8) -> void;
#foreign memcpy :: (dest: *u8, src: *u8, size: s64) -> *u8;

String :: struct {
    data: *u8;
    length: s64;
}

Type_Info_Kind :: enum {
    Invalid      ::  0,

    Void         ::  1,
    Integer      ::  2,
    Real         ::  3,
    Bool         ::  4,

    Pointer      ::  5,

    Struct       ::  6,
    Enum         ::  7,
    Static_Array ::  8,
    Slice        ::  9,
    Function     :: 10,
}

// This must always be the first member of any Type_Info_* structure
Type_Info :: struct {
    kind: Type_Info_Kind;
    size: s64;
}

Type_Info_Int :: struct {
    base: Type_Info;
    sign: bool;
}

Type_Info_Pointer :: struct {
    base: Type_Info;
    pointer_to: *Type_Info;
}

Type_Info_Struct_Member :: struct {
    name: String;
    type: *Type_Info;
    offset: s64;
}

Type_Info_Struct :: struct {
    base: Type_Info;

    name: String;
    members: []Type_Info_Struct_Member;
}

Type_Info_Enum_Member :: struct {
    name: String;
    value: s64;
}

Type_Info_Enum :: struct {
    base: Type_Info;

    name: String;
    integer_type: *Type_Info;

    members: []Type_Info_Enum_Member;
}

Type_Info_Static_Array :: struct {
    base: Type_Info;

    element_type: *Type_Info;
    length: s64;
}

Type_Info_Slice :: struct {
    base: Type_Info;

    element_type: *Type_Info;
}

Type_Info_Function :: struct {
    base: Type_Info;

    parameters: []*Type_Info;
    return_type: *Type_Info;
}

_type_info_pointers : []*Type_Info;

Any :: struct {
    type: *Type_Info;
    value: *void;
}
