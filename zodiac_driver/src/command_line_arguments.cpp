#include "command_line_arguments.h"

#include "platform/filesystem.h"
#include "util/asserts.h"
#include "util/logger.h"
#include "util/zstring.h"
#include "zodiac_context.h"

const char *argp_program_version = ZODIAC_ARGP_PROGRAM_VERSION;

namespace Zodiac
{

static const argp_option argp_options[] = {
    { "out", 'o', "OUTFILE", 0, "Output file name", 1 },
    { "print_bytecode", 'b', nullptr, 0, "Print generated bytecode", 2 },
    { "print_llvm_ir", 'l', nullptr, 0, "Print generated llvm ir", 2 },
    { "verbose", 'v', nullptr, 0, "Verbose logging", 2 },
    { 0 },
};

void parse_command_line_options(Zodiac_Options *opts, int argc, const char **argv)
{
    assert(opts);

    argp argp_parser = { argp_options, parse_opt, ZODIAC_ARGP_ARGS_DOC, ZODIAC_ARGP_PROGRAM_DOC, 0, 0, 0 };

    opts->output_file_name = "a.out";
    argp_parse(&argp_parser, argc, (char **)argv, 0, 0, opts);

    if (opts->verbose) {
        logging_system_set_max_level(Log_Level::TRACE);
    }

    if (string_empty(opts->input_file_name)) {
        ZFATAL("Input file required");
    }

    if (!filesystem_exists(opts->input_file_name)) {
        ZFATAL("Input file '%.*s' does not exist", (int)opts->input_file_name.length, opts->input_file_name.data);
    }
}

error_t parse_opt(int key, char *arg, argp_state *state)
{
    auto *options = (Zodiac_Options *)state->input;

    switch (key) {
        case 'o': options->output_file_name = arg; break;;
        case 'b': options->print_bytecode = true; break;
        case 'l': options->print_llvm_ir = true; break;
        case 'v': options->verbose = true; break;

        case ARGP_KEY_ARG: {
            if (state->arg_num != 0) {
                ZFATAL("Can only accept 1 input file (non option argument)")
            }
            options->input_file_name = arg;
            break;
        }

        case ARGP_KEY_END: {
            if (state->arg_num != 1) {
                ZFATAL("INFILE required\n");
                argp_usage(state);
            }
            break;
        }

        default: return ARGP_ERR_UNKNOWN;
    }

    return 0;
}


}
