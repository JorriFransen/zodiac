#run main();

signed_integer :: #run return_signed_integer(7);
unsigned_integer :: #run return_unsigned_integer(8);
float :: #run return_float(4.2);
double :: #run return_double(8.4);
bool_true :: #run return_bool(true);
bool_false :: #run return_bool(false);
vector :: #run make_vector(2, 3);
aabb :: #run make_aabb(vector, {3, 4});
test_array :: #run make_test_array();
short_array :: #run make_short_array(44, 22);

another : Vec2 : { 8, 9 };
sanother : [2]s64 : { 10, 11 };

main :: () {
    print(signed_integer);
    print(unsigned_integer);
    print(float);
    print(double);
    print(bool_true);
    print(bool_false);
    print_vector(vector);
    print_aabb(aabb);
    print_test_array(test_array);
    print_short_array(short_array);
    print_vector(another);
    print_short_array(sanother);
    return 0;
}

return_signed_integer :: (x: s64) -> s64 { return x; }
return_unsigned_integer :: (x: u64) -> u64 { return x; }
return_float :: (x: r32) -> r32 { return x; }
return_double :: (x: r64) -> r64 { return x; }
return_bool :: (x: bool) -> bool { return x; }

Vec2 :: struct { x, y: s64; }

make_vector :: (x: s64, y: s64) -> Vec2 {
    result: Vec2;
    result.x = x;
    result.y = y;
    return result;
}

print_vector :: (v: Vec2) {
    print(v.x, ", ", v.y);
}

AABB :: struct { pos, size: Vec2; }

make_aabb :: (pos: Vec2, size: Vec2) -> AABB {
    result: AABB;
    result.pos = pos;
    result.size = size;
    return result;
}

print_aabb :: (r: AABB) {
    print(r.pos.x, ", ", r.pos.y, ", ", r.size.x, ", ", r.size.y);
}

make_test_array :: () -> [5]s64 {
    return { 5, 4, 3, 2, 1 };
}

print_test_array :: (a: [5]s64) {
    print(a[0], ", ", a[1], ", ", a[2], ", ", a[3], ", ", a[4]);
}

make_short_array :: (x0: s64, x1: s64) -> [2]s64 {
    r: [2]s64;
    r[0] = x0;
    r[1] = x1;
    return r;
}

print_short_array :: (r: [2]s64) {
    print(r[0], ", ", r[1]);
}
